#! /bin/sh
# XFS QA Test No. 007
# $Id: 1.1 $
#
# drive the src/nametest program
# which does a heap of open(create)/unlink/stat
# and checks that error codes make sense with its
# memory of the files created.
#
#-----------------------------------------------------------------------
# Copyright (c) 2000 Silicon Graphics, Inc.  All Rights Reserved.
# 
# This program is free software; you can redistribute it and/or modify it
# under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
# 
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# 
# Further, this software is distributed without any warranty that it is
# free of the rightful claim of any third person regarding infringement
# or the like.  Any license provided herein, whether implied or
# otherwise, applies only to this software file.  Patent licenses, if
# any, provided herein do not apply to combinations of this program with
# other software, or any other product whatsoever.
# 
# You should have received a copy of the GNU General Public License along
# with this program; if not, write the Free Software Foundation, Inc., 59
# Temple Place - Suite 330, Boston MA 02111-1307, USA.
# 
# Contact information: Silicon Graphics, Inc., 1600 Amphitheatre Pkwy,
# Mountain View, CA  94043, or:
# 
# http://www.sgi.com 
# 
# For further information regarding this notice, see: 
# 
# http://oss.sgi.com/projects/GenInfo/SGIGPLNoticeExplan/
#-----------------------------------------------------------------------
#
# creator
owner=tes@sherman.melbourne.sgi.com

seq=`basename $0`
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
status=0	# success is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

_cleanup()
{
    rm -f $tmp.*
    rm -rf $TEST_DIR/$seq
}

# get standard environment, filters and checks
. ./common.rc
. ./common.filter

# real QA test starts here
status=1 # default failure 
sourcefile=$tmp.nametest
seed=1
iterations=100000
num_filenames=100

# need to create an input file with a list of
# filenames on each line 
i=1
while [ $i -le $num_filenames ]; do
  echo "nametest.$i" >>$sourcefile
  i=`expr $i + 1`
done

mkdir $TEST_DIR/$seq
cd $TEST_DIR/$seq
$here/src/nametest -l $sourcefile -s $seed -i $iterations -z


#optional stuff if your test has verbose output to help resolve problems
#echo
#echo "If failure, check $seq.full (this) and $seq.full.ok (reference)"


# success, all done
status=0
exit
