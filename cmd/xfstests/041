#! /bin/sh
# XFS QA Test No. 041
# $Id: 041,v 1.3 2000/09/27 00:24:17 ajag Exp ajag $
#
# growfs QA tests - repeatedly fill/grow the filesystem
# check the filesystem contents after each operation
#
#-----------------------------------------------------------------------
# Copyright (c) 2000 Silicon Graphics, Inc.  All Rights Reserved.
# 
# This program is free software; you can redistribute it and/or modify it
# under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
# 
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# 
# Further, this software is distributed without any warranty that it is
# free of the rightful claim of any third person regarding infringement
# or the like.  Any license provided herein, whether implied or
# otherwise, applies only to this software file.  Patent licenses, if
# any, provided herein do not apply to combinations of this program with
# other software, or any other product whatsoever.
# 
# You should have received a copy of the GNU General Public License along
# with this program; if not, write the Free Software Foundation, Inc., 59
# Temple Place - Suite 330, Boston MA 02111-1307, USA.
# 
# Contact information: Silicon Graphics, Inc., 1600 Amphitheatre Pkwy,
# Mountain View, CA  94043, or:
# 
# http://www.sgi.com 
# 
# For further information regarding this notice, see: 
# 
# http://oss.sgi.com/projects/GenInfo/SGIGPLNoticeExplan/
#-----------------------------------------------------------------------
#
set +x
# creator
owner=ajag@melbourne.sgi.com

seq=`basename $0`
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
status=1	# failure is the default!

_cleanup()
{
    umount $SCRATCH_MNT
    rm -f $tmp.*
}
trap "_cleanup ; exit \$status" 0 1 2 3 15

# get standard environment, filters and checks
. ./common.rc
. ./common.filter

# real QA test starts here

_require_scratch

_do()
{
    if [ $# -ne 1 ]; then echo "Usage: _do \"cmd\"" 1>&2 ; exit 1; fi
    echo "*** $1" >>$seq.full
    eval "$1 2>&1 | _fix_malloc >>$seq.full"
}

_fill()
{
    if [ $# -ne 1 ]; then echo "Usage: _fill \"path\"" 1>&2 ; exit 1; fi
    echo -n "Fill filesystem... "
    _do "(src/fill2fs --verbose --dir=$1 --seed=0 --filesize=65536 --stddev=32768 --list=- >>$tmp.manifest)"
    echo "done"
}

rm -f $seq.full
#agsize=16
agsize=32
echo -n "Make $agsize megabyte filesystem on SCRATCH_DEV and mount... "
_do "mkfs -t xfs -d size=${agsize}m,agcount=1 -l internal -f $SCRATCH_DEV"
_do "mount -t xfs $SCRATCH_DEV $SCRATCH_MNT"
echo "done"

# full allocation group -> partial; partial -> expand partial + new partial;
# partial -> expand partial; partial -> full
# 17 -> 33 -> 35 -> 48 megabytes, converted to fs blocks below
#for size in 4352 8448 8960 12288
# 33 -> 67 -> 75 -> 96 converted to fs blocks:
for size in 8448 17512 19200 24576
do
    _fill $SCRATCH_MNT/fill_$size
    echo -n "Grow filesystem to $size blocks... "
    _do "xfs_growfs -D ${size} $SCRATCH_MNT"
    echo "done"
    echo -n "Flush filesystem... "
    _do "umount $SCRATCH_MNT"
    _do "mount -t xfs $SCRATCH_DEV $SCRATCH_MNT"
    echo "done"
    echo -n "Check files... "
    if ! _do "src/fill2fs_check $tmp.manifest"; then
	echo "fail"
	echo "Files corrupt/missing after growfs. Test failed see $seq.full"
	status=1; exit
    fi
    echo "done"
#    echo -n "Checking filesystem... "
#    _check_fs $SCRATCH_DEV
#    echo "done"
done

# success, all done
echo "Growfs tests passed."
status=0 ; exit
